#!/bin/bash

set -e

show_usage() {
cat << EOF
  Usage: ${0##*/} [-u esxi_username] [-h esxi_hostname] [-i ssh_key_file] [-a action] [-d datastore] [-b build] [-o clone_dir ] [-v]

  -u esxi_username : specify the username to connect to esxi with
  -h esxi_hostname : specify the esxi host
  -i ssh_key_file  : The ssh private key used to log into the esxi server
  -a action        : The action to perform (currently power-on, power-off, registervm, unregistervm, clonevm)
  -d datastore     : datastore containing the VM we are acting upon
  -b build         : the pipeline build number
  -o clone_dir     : the directory to clone to for clonevm actions
  -v               : be more verbose
EOF
}

OPTIND=1
while getopts "u:h:a:i:d:b:o:v" opt; do
  case $opt in
    u)
      ESXI_USER=${OPTARG}
      ;;
    h)
      ESXI_HOSTNAME=${OPTARG}
      ;;
    a)
      ACTION=${OPTARG}
      ;;
    i)
      ID_FILE=${OPTARG}
      ;;
    d)
      DS=${OPTARG}
      ;;
    b)
      DIR=${OPTARG}
      ;;
    o)
      OUTDIR=${OPTARG}
      ;;
    v)
      VERBOSE=true
      ;;
    \?)
      echo "Invalid arg: -${OPTARG}"
      show_usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      show_usage
      exit 1
      ;;
  esac
done
shift "$((OPTIND-1))"

SSHCMD="ssh ${ESXI_USER}@${ESXI_HOSTNAME} -i ${ID_FILE}"

function power() {
  if $VERBOSE; then
    echo ${SSHCMD} "vim-cmd vmsvc/${ACTION} \$(vim-cmd vmsvc/getallvms | grep \"\[${DS}\] ${DIR}/packer-centos7\" | cut -d\" \" -f1)"
  fi
  ${SSHCMD} "vim-cmd vmsvc/${ACTION} \$(vim-cmd vmsvc/getallvms | grep \"\[${DS}\] ${DIR}/packer-centos7\" | cut -d\" \" -f1)"
}

function register_vm() {
  [[ ${ACTION} = 'registervm' ]] && CMD='solo' || CMD='vmsvc'
  if $VERBOSE; then
    echo ${SSHCMD} "vim-cmd $CMD}/${ACTION} /volumes/vmfs/${DS}/${DIR}/packer-centos7.vmx"
  fi
  ${SSHCMD} "vim-cmd ${CMD}/${ACTION} /volumes/vmfs/${DS}/${DIR}/packer-centos7.vmx"
}

function clone_vm() {
  if $VERBOSE; then
    echo ${SSHCMD} "mkdir /vmfs/volumes/${DS}/${OUTDIR}"
    echo ${SSHCMD} "vmkfstools -i /vmfs/volumes/${DS}/${DIR}/disk.vmdk -d thin /vmfs/volumes/${DS}/${OUTDIR}/disk.vmdk"
    echo ${SSHCMD} "find /vmfs/volumes/${DS}/${DIR} -type f -not -name '*.vmdk' -exec cp -v \"{}\" /vmfs/volumes/${DS}/${OUTDIR} \\;"
    echo ${SSHCMD} "vim-cmd solo/registervm /vmfs/volumes/${DS}/${OUTDIR}/packer-centos7.vmx ${OUTDIR}"
  fi
  ${SSHCMD} "mkdir /vmfs/volumes/${DS}/${OUTDIR}"
  ${SSHCMD} "vmkfstools -i /vmfs/volumes/${DS}/${DIR}/disk.vmdk -d thin /vmfs/volumes/${DS}/${OUTDIR}/disk.vmdk"
  ${SSHCMD} "find /vmfs/volumes/${DS}/${DIR} -type f -not -name '*.vmdk'"
  ${SSHCMD} "find /vmfs/volumes/${DS}/${DIR} -type f -not -name '*.vmdk' -exec cp -v \"{}\" /vmfs/volumes/${DS}/${OUTDIR} \\;"
  ${SSHCMD} "vim-cmd solo/registervm /vmfs/volumes/${DS}/${OUTDIR}/packer-centos7.vmx ${OUTDIR}"
}

function get_ip() {
  if $VERBOSE; then
    echo ${SSHCMD} "vim-cmd vmsvc/get.summary \$(vim-cmd vmsvc/getallvms | grep \"\[${DS}\] ${DIR}/\" | cut -d\" \" -f1)" | grep ip | awk -F'\"' '{print $2}'
  fi
  ${SSHCMD} "vim-cmd vmsvc/get.summary \$(vim-cmd vmsvc/getallvms | grep \"\[${DS}\] ${DIR}/\" | cut -d\" \" -f1)" | grep ip | awk -F'\"' '{print $2}'
}

case ${ACTION} in
  power-on|power-off)
    power
    ;;
  registervm|unregistervm)
    register_vm
    ;;
  clonevm)
    clone_vm
    ;;
  getip)
    get_ip
    ;;
  *)
    show_usage
    exit 1
    ;;
esac
